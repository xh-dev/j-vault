name: Java CI with Maven Release

on:
  push:
    tags:
      - "v*"
jobs:
  basic-jar-build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: gen version
      run: python get_version.py > src/main/resources/version.txt
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: save url
      run: echo "${{ steps.create_release.outputs.upload_url }}">artifact-url
    - name: cache upload_url
      id: cache-artifact-url
      uses: actions/cache@v3
      with:
        path: artifact-url
        key: sha-${{ github.ref }}
    - name: upload jar artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: target/j-vault.jar
        asset_name: jar/j-vault.jar
        asset_content_type: application/java-archive
  build-linux-executable:
    runs-on: ubuntu-latest
    needs:
      - basic-jar-build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - uses: actions/cache/restore@v3
        id: cache
        with:
          path: artifact-url
          key: sha-${{ github.ref }}
      - name: show url
        run: cat artifact-url
      - name: gen version
        run: python get_version.py > src/main/resources/version.txt
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          cache: maven
      - run: mvn -Dmaven.test.skip=true clean compile package
      - run: native-image -jar ./target/j-vault.jar
      - name: upload jar artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: j-vault
          asset_name: linux/j-vault
          asset_content_type: application/octet-stream
  build-windows-executor:
    runs-on: windows-latest
    needs:
      - basic-jar-build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: install py dependency
        run: pip install -r requirements.txt
      - name: gen version
        run: python get_version.py > src/main/resources/version.txt
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          cache: maven
      - run: mvn "-Dmaven.test.skip=true" clean compile package
      - run: native-image -jar target/j-vault.jar
      - name: upload jar artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: j-vault.exe
          asset_name: win/j-vault.exe
          asset_content_type: application/octet-stream
